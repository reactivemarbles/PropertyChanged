<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Collections.dll" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
// Copyright (c) 2019-<#=DateTime.Now.Year#> ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.
// <auto-generated />

using System;
using System.Threading.Tasks;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Jobs;
using Microsoft.CodeAnalysis;
using ReactiveMarbles.PropertyChanged.SourceGenerator.Builders;

namespace ReactiveMarbles.PropertyChanged.SourceGenerator.Benchmarks
{
    [SimpleJob(RuntimeMoniker.NetCoreApp31)]
    [MemoryDiagnoser]
    [MarkdownExporterAttribute.GitHub]
    [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)]
    public class WhenChangedBenchmarks
    {
	    public CompilationUtil Compilation { get; set; }

        [ParamsAllValues]
        public InvocationKind InvocationKind { get; set; }

        [Params(Accessibility.Public, Accessibility.Private)]
        public Accessibility Accessibility { get; set; }

        public string UserSource { get; set; }

<#
    var depths = new[] { 1, 2, 10, 20 };
#>

<#
        for (var i = 0; i < depths.Length; i++)
        {
            var depth = depths[i];
            var expression = string.Join(".", Enumerable.Range(1, depth - 1).Select(x => "Child").Prepend("x").Append("Value"));
#>
        [GlobalSetup(Targets = new[] { nameof(Depth<#= depth #>WhenChanged) })]
        public Task Depth<#= depth #>WhenChangedSetup()
        {
            var hostPropertyTypeInfo = new EmptyClassBuilder()
                .WithClassAccess(Accessibility);
            UserSource = new WhenChangedHostBuilder()
                .WithClassAccess(Accessibility)
                .WithPropertyType(hostPropertyTypeInfo)
                .WithInvocation(InvocationKind, x => <#= expression #>)
                .BuildSource();

            Compilation = new CompilationUtil(_ => { });
            return Compilation.Initialize();
        }

        [Benchmark]
        [BenchmarkCategory("Change Depth <#= depth #>")]
        public void Depth<#= depth #>WhenChanged()
        {
            var newCompilation = Compilation.RunGenerators(out _, out _, out _, out _, new[] { ("usersource.cs", UserSource) });
        }
<#
            }
#>

    }
}
