// Copyright (c) 2019-2021 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.
// <auto-generated />

namespace ReactiveMarbles.PropertyChanged.SourceGenerator;

internal static partial class Constants
{
    internal const string WhenChangedMethodName = "WhenChanged";
    internal const string WhenChangingMethodName = "WhenChanging";
    internal const string WhenExtensionClass = "NotifyPropertyExtensions";

    internal const string BindTwoWayMethodName = "BindTwoWay";
    internal const string BindOneWayMethodName = "BindOneWay";
    internal const string BindExtensionClass = "BindingExtensions";

    // file header stuff
    internal const string WarningDisable = @"//----------------------
// <auto-generated>
//     Generated by ReactiveMarbles.PropertyChanged.SourceGenerator.  DO NOT EDIT!
// </auto-generated>
//----------------------
#pragma warning disable
";

    internal const string PreserveAttribute = @"
#pragma warning disable
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
[global::System.AttributeUsage (global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Enum | global::System.AttributeTargets.Constructor | global::System.AttributeTargets.Method | global::System.AttributeTargets.Property | global::System.AttributeTargets.Field | global::System.AttributeTargets.Event | global::System.AttributeTargets.Interface | global::System.AttributeTargets.Delegate)]
sealed class PreserveAttribute : global::System.Attribute
{
    //
    // Fields
    //
    public bool AllMembers;
    public bool Conditional;
}";

    // attributes
    internal const string ExcludeFromCodeCoverageAttributeTypeName = "global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute";
    internal const string DebuggerNonUserCodeAttributeTypeName = "global::System.Diagnostics.DebuggerNonUserCodeAttribute";
    internal const string PreserveAttributeTypeName = "PreserveAttribute";
    internal const string ObfuscationAttributeTypeName = "global::System.Reflection.Obfuscation";
    internal const string EditorBrowsableTypeName = "global::System.ComponentModel.EditorBrowsable";

    // variable names
    internal const string HostObservableVariable = "hostObs";
    internal const string FromObjectVariable = "fromObject";
    internal const string ThisObjectVariable = "this";
    internal const string TargetObservableVariable = "targetObs";

    // types
    internal const string StringTypeName = "global::System.String";
    internal const string ObservableLinqTypeName = "global::System.Reactive.Linq.Observable";
    internal const string ObservableExtensionsTypeName = "global::System.ObservableExtensions";
    internal const string WhenChangedEventHandler = "global::System.ComponentModel.PropertyChangedEventHandler";
    internal const string WhenChangingEventHandler = "global::System.ComponentModel.PropertyChangingEventHandler";
    internal const string IObservableTypeName = "global::System.IObservable";
    internal const string ImmediateSchedulerTypeName = "global::System.Reactive.Concurrency.ImmediateScheduler";
    internal const string SystemDisposableTypeName = "global::System.IDisposable";
    internal const string ReactiveDisposableTypeName = "global::System.Reactive.Disposables.Disposable";
    internal const string ISchedulerTypeName = "global::System.Reactive.Concurrency.IScheduler";
    internal const string CompositeDisposableTypeName = "global::System.Reactive.Disposables.CompositeDisposable";
    internal const string FuncTypeName = "global::System.Func";
    internal const string ExpressionTypeName = "global::System.Linq.Expressions.Expression";
    internal const string CallerMemberAttributeTypeName = "global::System.Runtime.CompilerServices.CallerMemberNameAttribute";
    internal const string CallerFilePathAttributeTypeName = "global::System.Runtime.CompilerServices.CallerFilePath";
    internal const string CallerLineNumberAttributeTypeName = "global::System.Runtime.CompilerServices.CallerLineNumber";
    internal const string InvalidOperationExceptionTypeName = "global::System.InvalidOperationException";
    internal const string EditorBrowsableStateTypeName = "global::System.ComponentModel.EditorBrowsableState";

    // method names
    internal const string EqualsMethod = "Equals";
    internal const string ToStringMethod = "ToString";
    internal const string SelectMethod = "Select";
    internal const string SubscribeMethodName = "Subscribe";
    internal const string ObserveOnMethodName = "ObserveOn";
    internal const string CreateMethodName = "Create";
    internal const string OnNextMethodName = "OnNext";
    internal const string HandlerMethodName = "Handler";
    internal const string SwitchMethodName = "Switch";
    internal const string SkipMethodName = "Skip";
    internal const string CombineLatestMethodName = "CombineLatest";

    // events
    internal const string WhenChangedEventName = "PropertyChanged";
    internal const string WhenChangingEventName = "PropertyChanging";

    // parameter names
    internal const string SchedulerParameter = "scheduler";
    internal const string HostToTargetConverterFuncParameter = "hostToTargetConv";
    internal const string TargetToHostConverterFuncParameter = "targetToHostConv";
    internal const string TargetParameter = "targetObject";
    internal const string FromPropertyParameter = "fromProperty";
    internal const string ToPropertyParameter = "toProperty";
    internal const string LambdaSingleParameterName = "x";
    internal const string ObserverParameterName = "observer";
    internal const string SourceParameterName = "source";
    internal const string SenderParameterName = "sender";
    internal const string CallerMemberParameterName = "callerMember";
    internal const string CallerFilePathParameterName = "callerFilePath";
    internal const string CallerLineNumberParameterName = "callerLineNumber";
    internal const string EventArgumentsParameterName = "e";
    internal const string HandlerParameterName = "handler";
    internal const string PropertyExpressionParameterName = "propertyExpression";
    internal const string ConverterParameterName = "conversionFunc";

    // property names
    internal const string InstancePropertyName = "Instance";
    internal const string EmptyPropertyName = "Empty";
    internal const string PropertyNamePropertyName = "PropertyName";
    internal const string ParentPropertyName = "Parent";

    // Enum member names
    internal const string NeverEnumMemberName = "Never";
}