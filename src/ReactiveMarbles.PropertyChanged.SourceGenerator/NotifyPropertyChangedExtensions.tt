<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
var maxDepth = 12;
#>
// Copyright (c) 2019-2021 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Runtime.CompilerServices;

/// <summary>
/// Provides extension methods for the notify property changed extensions.
/// </summary>
public static partial class NotifyPropertyChangedExtensions
{
    /// <summary>
    /// Notifies when the specified property changes.
    /// </summary>
    /// <param name="objectToMonitor">The object to monitor.</param>
    /// <param name="propertyExpression">The expression to the object.</param>
    /// <param name="callerMemberName">The caller of the method.</param>
    /// <param name="callerFilePath">The caller file path.</param>
    /// <param name="callerLineNumber">The caller line number.</param>
    /// <typeparam name="TObj">The type of initial object.</typeparam>
    /// <typeparam name="TReturn">The eventual return value.</typeparam>
    /// <returns>An observable that signals when the property specified in the expression has changed.</returns>
    public static IObservable<TReturn> WhenChanged<TObj, TReturn>(
        this TObj objectToMonitor, 
        Expression<Func<TObj, TReturn>> propertyExpression,
        [CallerMemberName]string callerMemberName = null,
        [CallerFilePath]string callerFilePath = null,
        [CallerLineNumber]int callerLineNumber = 0)
        where TObj : INotifyPropertyChanged
    {
        throw new Exception("The impementation should have been generated.");
    }
<#
for (int depth = 2; depth <= maxDepth; depth++)
{
#>

    /// <summary>
    /// Notifies when the specified property changes.
    /// </summary>
    /// <param name="objectToMonitor">The object to monitor.</param>
<#
    for (int i = 1; i <= depth; ++i)
    {
#>
    /// <param name="propertyExpression<#= i #>">A expression to the value<#= i #>.</param>
<#
    } 
#>
    /// <param name="conversionFunc">Parameter which converts into the end value.</param>
    /// <param name="callerMemberName">The caller of the method.</param>
    /// <param name="callerFilePath">The caller file path.</param>
    /// <param name="callerLineNumber">The caller line number.</param>
    /// <typeparam name="TObj">The type of initial object.</typeparam>
<#
    for (int i = 1; i <= depth; ++i)
    {
#>
    /// <typeparam name="TTempReturn<#= i #>">The return type of the value<#= i #>.</typeparam>
<#
    }
#>
    /// <typeparam name="TReturn">The return value of the observable. Generated from the conversion func.</typeparam>
    /// <returns>An observable that signals when the properties specified in the expressions have changed.</returns>
<#
    var expressionReturn = string.Join(", ", Enumerable.Range(1, depth).Select(x => "TTempReturn" + x));
#>
    public static IObservable<TReturn> WhenChanged<TObj, <#= expressionReturn #>, TReturn>(
        this TObj objectToMonitor,
<#
    for (int i = 1; i <= depth; ++i)
    {
#>
        Expression<Func<TObj, TTempReturn<#= i #>>> propertyExpression<#= i #>,
<#
    }
#>
        Func<<#= expressionReturn #>, TReturn> conversionFunc,
        [CallerMemberName]string callerMemberName = null,
        [CallerFilePath]string callerFilePath = null,
        [CallerLineNumber]int callerLineNumber = 0)
            where TObj : class, INotifyPropertyChanged
    {
        throw new NotImplementedException("The impementation should have been generated.");
    }
<#
}
#>

    private static IObservable<T> GenerateObservable<TObj, T>(
            TObj parent,
            string memberName,
            Func<TObj, T> getter)
        where TObj : INotifyPropertyChanged
    {
        return Observable.Create<T>(
                observer =>
                {
                    PropertyChangedEventHandler handler = (object sender, PropertyChangedEventArgs e) =>
                    {
                        if (e.PropertyName == memberName)
                        {
                            observer.OnNext(getter(parent));
                        }
                    };

                    parent.PropertyChanged += handler;

                    return Disposable.Create((parent, handler), x => x.parent.PropertyChanged -= x.handler);
                })
            .StartWith(getter(parent));
    }
}
